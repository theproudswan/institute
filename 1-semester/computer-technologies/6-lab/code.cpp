// Вариант 13

#include <iostream>
#include <ctime>
#include <iomanip>
#include <climits> // Для использования INT_MAX и INT_MIN

using namespace std;

int main(){
    srand(time(NULL));

    bool flag; // Флаг, отвечающий, хотим ли мы ввести массив с клавиатуры или сгенерировать

    cout<<"Ввести массив с клавиатуры (0) или сгенерировать автоматически (1): ";
    cin>>flag;

    int n = 0, m = 0; // Количество строк и столбцов соответственно
    int **A; // Матрица значений А
    int **B; // Вспомогательный массив для суммы строк
    int minimal, maximal; // Минимум и максимум в строке
    if (flag){ // Если выбрана случайная генерация
        n = rand()%5 + 3; // Случайно генерируем количество строк
        cout<<"Количество строк: " <<n<<endl;
        m = rand()%5 + 3; // Случайно генерируем количество столбцов
        cout<<"Количество столбцов: "<<m<<endl;
        A = new int *[n]; // Задаём массив указателей
        B = new int *[n]; // Задаём массив сумм строк
        cout<<"\nСформирован массив \n";
        for (int i = 0; i < n; ++i){
            A[i] = new int [m]; // Создаём строчку
            B[i] = new int [3];
            minimal = INT_MAX; // Присваиваем максимальное значение переменной типа int
            maximal = INT_MIN; // Присваиваем минимальное значение переменной типа int
            for (int j = 0; j < m; ++j){
                A[i][j] = rand()%11 - 5; // Случайно генерируем значение ячейки в матрице
                cout<<setw(3)<<A[i][j]<<' '; // Выводим сгенерированное значение
                minimal = min(A[i][j], minimal); // Сравниваем новое значение в строке с её текущим минимумом и перезаписываем
                maximal = max(A[i][j], maximal); // Сравниваем новое значение в строке с её текущим максимальным и перезаписываем
            }
            B[i][0] = minimal;
            B[i][1] = maximal;
            B[i][2] = maximal - minimal; // Ищем разность максимального и минимального значения в строке и записываем в массив
            cout<<endl;
        }
    } else {
        cout<<"Введите количество строк: ";
        cin>>n;
        cout<<"Введите количество столбцов: ";
        cin>>m;
        A = new int *[n];
        B = new int *[n];
        cout<<"Введите массив  \n\n";
        for (int i = 0; i < n; ++i){
            A[i] = new int [m]; // Создаём строчку
            B[i] = new int [3];
            minimal = INT_MAX; // Присваиваем максимальное значение переменной типа int
            maximal = INT_MIN; // Присваиваем минимальное значение переменной типа int
            for (int j = 0; j < m; ++j){
                cout<<"A["<<i<<"]["<<j<<"] = ";
                cin>>A[i][j]; // Ввод значения ячейки матрицы
                minimal = min(A[i][j], minimal); // Сравниваем новое значение в строке с её текущим минимумом и перезаписываем
                maximal = max(A[i][j], maximal); // Сравниваем новое значение в строке с её текущим максимальным и перезаписываем
            }
            B[i][0] = minimal;
            B[i][1] = maximal;
            B[i][2] = maximal - minimal; // Ищем разность максимального и минимального значения в строке и записываем в массив
            cout<<endl;
        }
        cout<<"Введена матрица: "<<endl;
        for (int i = 0; i < n; ++i){
            for (int j = 0; j < m; ++j){
                cout<<setw(3)<<A[i][j]<<' '; // Вывод введённой матрицы в табличном виде
            }
            cout<<endl;
        }

    }

    cout<<endl<<endl;
    for (int i = 0; i < n; ++i){
        cout << "В "<<i<<"-й строке разность минимального "<<B[i][0]<<" и максимального "<<B[i][1]<<" равна " << B[i][2]<<endl;
    }
    cout<<"\nАдрес матрицы: "<<A<<endl;
    cout<<"Адрес нулевого элемента: "<<&A[0][0]<<endl<<endl;
    for (int i = 0; i < n; ++i){
        cout<<"Адрес нулевого элемента "<<i<<"-й строки " <<&A[i][0] << endl;
    }
    cout<<'\n';
    for (int i = 0; i < n; ++i){
        cout<<"Адрес "<<i<<"-й строки " <<A[i] << endl;
    }
    cout<<"\n----------------------\n";
    for (int i = 0; i<n; ++i){
        delete []A[i];
    }
    cout<<"\nУдаление массива A[]";
    delete []A;
    cout<<"\nМассив A[] был удалён\n";
    cout<<"\nУдаление массива B[]\n";
    for (int i = 0; i<n; ++i){
        delete []B[i];
    }
    delete []B;
    cout<<"Массив B[] был удалён\n";
    return 0;
}
