//============================================================================
// Компилятор  : g++ v. 10.2.1
// Название    : main.cpp
// Автор       : Лебедев Иван
// Группа      : М3О-211Б-20
// Содержание  : Главная функция программы
//============================================================================
#include "LinkedList.h" // Заголовочный файл со списком
#include "tests.h"		// Заголовочный файл с тестами

#include <iostream>		// Библиотека для работы с потоками ввода/вывода
#include <string>		// Библиотека для работы со строками
#include <ctime> 		// Библиотека для работы со временем

#define MAX_STRING_LENGTH 5 // Максимальная длина генерируемого слова
#define LETTERS_COUNT 26	// Количество букв в латинском алфавите

using namespace std; // Пространство имён для работы с функциями стандартной библиотеки

void RunTests (								// Функция для запуска всех тестов
				LinkedList<string>& list){	// Список, который будет тестироваться
	Tests::Find(list);						// Тестирование поиска в списке
	Tests::Ring(list);						// Тестирование целостности списка
    Tests::FindMax(list);					// Тестирование поиска максимального значения
    Tests::RemoveAndInsertAfter(list);		// Тестирование удаления и вставки в список
	Tests::Ring(list);						// Тестирование целостности списка
}

int main() {					// Начало главной функции
	srand(time(NULL));			// Обнуление "зерна" времени
	LinkedList<string> list;	// Объявление списка строк
	bool input_flag = 0;		// Переменная отвечает за способ генерации списка: 0 - ручной ввод, 1 - случайная генерация
	cout << "Выберите ручной или автоматический ввод (0/1) : ";
	cin >> input_flag;			// Ввод способа генерации
	size_t list_size;			// Переменная хранит размер создаваемого списка
	cout << "Введите размер списка: ";
	cin >> list_size;			// Ввод размера списка
	if (!input_flag){			// Если выбран ручной ввод
		for (size_t i = 0; i < list_size; ++i){	// Начать цикл по i от 0 до list_size с шагом 1 для заполнения списка
			string input_tmp;					// Создать переменную, куда будет считываться введённая строка
			cout << "list[" << i << "] = ";		// Вывод служебного сообщения
			cin >> input_tmp;					// Ввести строку
			list.PushBack(input_tmp);			// Добавить строку в конец списка
		}										// Конец цикла по i
	} else {					// Если выбрана случайная генерация строк
		for (size_t i = 0; i < list_size; ++i){	// Начать цикл по i от 0 до list_size с шагом 1 для заполнения списка
			string input_tmp = []{	// Создать переменную, куда будет записываться сгенерированная строка, начало лямбда-функции
				string result;		// Временная переменная
				short unsigned res_length = rand() % MAX_STRING_LENGTH + 1; // Случайно сгенерировать размер очередной строки
				for (short unsigned i = 0; i < res_length; ++i){			// Цикл для создания res_length символов
					result += static_cast<char>(rand() % (LETTERS_COUNT - 1) + 65 + (rand() % 2) * 32); // Генерация очередного символа
				}															// Конец цикла генерации строки
				return result;	// Возвращение сгенерированной строки
			}(); // Конец лямбда-функции и её вызов
			list.PushBack(input_tmp); // Добавление очередного сгенерированного элемента в конец списка
		} // Конец цикла заполнения списка
	}	  // Конец заполнения 

	cout << "Сформирован список: " << endl;

	for (size_t i = 0; i < list_size; ++i){ // Цикл для перебора всего списка
		cout << "list[" << i << "] = " << list[i]->value << endl; // Вывод очередного элемента
	}										// Конец перебора списка

	cout << endl << endl;	// Отступы

	RunTests(list);	// Запуск тестов

	return 0; // Вернуть 0 - программа завершилась корректно
}	// Конец главной функции